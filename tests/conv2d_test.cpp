#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest/doctest.h"

#ifdef VOID
#undef VOID
#endif


#include <tuple>
#include <string>

#include "conv2d_v2.hpp"

#include "xtensor/xtensor.hpp"

TEST_CASE("Input Layout: Channel x Height x Width")
{
	SUBCASE("Even Input, Odd Kernel") 
	{
		xt::xtensor<int, 3> inputBlackAndWhite{{
			{810, 814, 401, 211, 690,  76, 762, 588, 871, 378}, 
			{962,  28, 457, 966, 607, 302, 903,  10, 263, 572}, 
			{991,  44, 500, 126, 270, 499, 540, 247, 314,  38}, 
			{854, 329, 435, 175,  33, 648, 697, 797, 919, 771}, 
			{176, 385, 806, 500, 545, 365, 602, 506, 873, 885}, 
			{111, 894, 500, 100, 836, 858,  86, 357,  82, 850}, 
			{109, 954, 783, 899, 269, 175, 456, 280, 384, 795}, 
			{678, 805,  98, 676, 987, 837,   5, 785, 510, 454}, 
			{540,  15, 709, 843,  38, 608, 560, 954, 574, 147}, 
			{139, 431, 453, 471, 676,  78, 191, 345, 190, 662}, 
			{ 24, 382, 190, 626, 200, 844, 548, 927, 196, 453}
		}};
		xt::xtensor<int, 4> kernelsBlackAndWhite{{
			{
				{4, 1, 2},
				{0, 2, 4},
				{4, 2, 2},
				{4, 4, 1}
			}
		}};
		
		xt::xtensor<int, 3> inputColor{
			{{682,31, 888,22, 515, 670, 197, 898, 135, 935}, 
			 {603, 639,29, 655, 444, 160, 974,46, 479, 536}, 
			 {359, 563, 550, 695, 935, 567, 416, 207, 810, 508}, 
			 {409, 986, 615, 864, 512, 875, 232, 135, 401, 310},
			 {361, 295, 884, 222, 274, 403, 315, 860, 519, 643},
			 { 42, 645, 866, 974, 355, 425, 426, 742, 701, 228},
			 {401, 984, 790, 811, 888, 259, 506, 455, 395, 398}, 
			 {949, 340, 824, 529, 949, 637, 206, 502, 216, 840},
			 {342, 288, 231, 350, 623, 186, 525, 394, 411, 852},
			 {370, 850, 172, 208, 933, 352, 802, 819, 249, 377},
			 {300,52, 493, 987, 568, 318, 769, 228, 440, 180}},
			 
			{{860, 382, 969, 360, 804, 474, 288, 798, 131, 469}, 
			 {574, 611,49, 633, 198, 459, 182, 432, 605, 958}, 
			 {601, 383, 532, 361, 956, 265, 730, 101, 903, 403}, 
			 {611, 949, 165,36,20, 545, 483, 774, 853,99}, 
			 {153, 151, 850, 419, 364, 835, 816, 448, 169,12},
			 {851, 274, 754, 656,69,49, 231, 244, 727, 162}, 
			 {328, 500, 819, 747, 519, 403, 935, 860, 520, 520},
			 {600, 462, 985, 239, 380, 831, 575, 740, 434, 596},
			 {405, 326, 749, 734, 755, 598,69, 372, 293, 759},
			 {138, 506, 753, 164, 756, 982, 307, 717, 480, 137}, 
			 {641, 314, 173, 489,71, 568, 951, 877, 157, 280}},
			 
			{{783, 692, 422, 639, 504, 689, 158, 919, 588, 943},
 			 {188, 682, 592, 139, 141, 264, 684, 765, 234,16},
			 {618, 956, 683, 225, 772, 272, 220, 872,99, 701}, 
			 {262, 431, 482, 404, 541,30, 733, 623, 115, 144}, 
			 {753, 498,78, 196, 894, 889, 831, 735, 937, 820},
			 {515,91, 427, 543, 590, 685, 453, 355, 674, 718},
			 {428, 708, 728, 819, 828, 903, 744, 113, 628,98}, 
			 {277, 586, 150, 195, 233, 508, 129, 132, 637, 433},
			 {428, 584, 712, 370, 680, 786, 972,67, 550, 452},
			 {442, 735, 999, 921, 274, 929, 313, 672, 967, 707}, 
			 {256, 323,28, 590, 902, 604, 907, 659, 526, 786}}
		};
		xt::xtensor<int, 4> kernelsColor{
			{
				{{3, 4, 4},{4, 3, 3},{3, 3, 2},{1, 1, 2}}, 
				{{3, 4, 4},{3, 3, 2},{4, 0, 4},{4, 2, 4}}, 
				{{4, 4, 1},{0, 3, 4},{1, 1, 4},{1, 4, 3}}
			},
			
			{
				{{0, 3, 0},{2, 0, 3},{0, 3, 4},{4, 2, 1}}, 
				{{3, 3, 3},{1, 4, 4},{4, 1, 4},{4, 0, 4}},
				{{1, 0, 0},{1, 3, 0},{1, 1, 1},{1, 0, 2}}
			},
			
			{
				{{1, 1, 4},{3, 4, 4},{0, 3, 0},{4, 1, 3}}, 
				{{3, 0, 4},{2, 3, 1},{2, 4, 1},{2, 4, 0}},
				{{2, 4, 3},{1, 3, 0},{3, 4, 0},{1, 4, 4}}
			}
		};
		
		SUBCASE("Default padding, dilation, stride") 
		{
			std::tuple<int, int> padding{0, 0};
			std::tuple<int, int> dilation{1, 1};
			std::tuple<int, int> stride{1, 1};
			Conv2D convolution(padding, dilation, stride);
			
			SUBCASE("Black'n'White") 
			{
				xt::xtensor<int, 3> expectedResult{{
					{16959, 13516, 12820,  7630, 15155, 13835, 16627, 16120}, 
					{14872, 11805, 13265, 14218, 14758, 14153, 17423, 15196}, 
					{15012, 12326, 11698, 12852, 17719, 15421, 15325, 14446}, 
					{16876, 18336, 16030, 13214, 12776, 15233, 14477, 17678}, 
					{16429, 16214, 17909, 20352, 15448, 10999, 12524, 17343}, 
					{14825, 17945, 16610, 14674, 15324, 16818, 12201, 18485}, 
					{11299, 16468, 18839, 18867,  9552, 11747, 14112, 13990}, 
					{10717, 15946, 12450, 15413, 16217, 17738, 13959, 14323}
				}};
				
				auto actualResult = convolution(inputBlackAndWhite, kernelsBlackAndWhite);
				
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
		
			SUBCASE("Color")
			{
				xt::xtensor<int, 3> expectedResult{
					{{56274, 46890, 46548, 44342, 48263, 49319, 49093, 45488},
					{48163, 46853, 46606, 48215, 49618, 52164, 50466, 46279}, 
					{53499, 52764, 54140, 50989, 49140, 46273, 50933, 47075}, 
					{53097, 54928, 55439, 53719, 50555, 51432, 56429, 48802}, 
					{54552, 54698, 55724, 53612, 53117, 51453, 53337, 53278}, 
					{56348, 58391, 63545, 57163, 50855, 46612, 45607, 49640}, 
					{57980, 57542, 64304, 59123, 59610, 54222, 48903, 51799}, 
					{49504, 46919, 50782, 56579, 56997, 55866, 46963, 50847}},
					
					{{33864, 38548, 33481, 30656, 34404, 27934, 36788, 30477}, 
					{34407, 31882, 34079, 33402, 29687, 31655, 35065, 33625}, 
					{36166, 32253, 32035, 36009, 30839, 33414, 38372, 30916}, 
					{42133, 38631, 34231, 33465, 36996, 34617, 37712, 31321},
					{38814, 39901, 39988, 34047, 35052, 36803, 34891, 31802},
					{40189, 38634, 43093, 35160, 33179, 33378, 30883, 34711},
					{38924, 35894, 39781, 38381, 36833, 40606, 32635, 37605},
					{30549, 33052, 37479, 40305, 38279, 40621, 32700, 33059}},
					
					{{50098, 41884, 39786, 39628, 36770, 41720, 36594, 43513}, 
					{39063, 39885, 36735, 39199, 42331, 42036, 46481, 44501},
					{43274, 47467, 44506, 42111, 41929, 38294, 45635, 40396},
					{40879, 48492, 46081, 42156, 40757, 43291, 43629, 38469}, 
					{45439, 43255, 47843, 45802, 44134, 47171, 43445, 44899}, 
					{44524, 49750, 45955, 44968, 46505, 37641, 38650, 37567}, 
					{47657, 54187, 50579, 48212, 54657, 44513, 40479, 42972},
					{38290, 36202, 45449, 46278, 45457, 44830, 40972, 43429}}
				};
				
				auto actualResult = convolution(inputColor, kernelsColor);
				
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
		}
		
		SUBCASE("Custom padding Default dilation, stride")
		{
			std::tuple<int, int> padding{3, 2};
			std::tuple<int, int> dilation{1, 1};
			std::tuple<int, int> stride{1, 1};
			Conv2D convolution(padding, dilation, stride);
			
			SUBCASE("Black'n'White")
			{
				xt::xtensor<int, 3> expectedResult{{
					{   810,  4054,  6897,  5071,  3138,  3680,  3826,  3940,  6271,  6214,  4996,  1512}, 
					{  2582,  7124, 10087,  7386,  9705,  8970,  8975,  7834,  9881,  6514,  7580,  3800}, 
					{  6155, 10864, 12690,  6906, 10930,  9449, 11654, 11313, 12280,  7246,  4360,  2440}, 
					{  8304, 10289, 16959, 13516, 12820,  7630, 15155, 13835, 16627, 16120, 13098,  4748}, 
					{  7772,  6631, 14872, 11805, 13265, 14218, 14758, 14153, 17423, 15196, 13950,  8912}, 
					{  5861,  6563, 15012, 12326, 11698, 12852, 17719, 15421, 15325, 14446, 11826,  7092}, 
					{  2743,  6804, 16876, 18336, 16030, 13214, 12776, 15233, 14477, 17678, 12961,  9664}, 
					{  1692, 10387, 16429, 16214, 17909, 20352, 15448, 10999, 12524, 17343, 13059,  8536},
					{  2554, 11074, 14825, 17945, 16610, 14674, 15324, 16818, 12201, 18485,  8600,  5804}, 
					{  4149,  8690, 11299, 16468, 18839, 18867,  9552, 11747, 14112, 13990,  9237,  6416}, 
					{  3818,  5046, 10717, 15946, 12450, 15413, 16217, 17738, 13959, 14323,  7468,  6276}, 
					{  1684,  3384,  7507,  8405,  9813, 10882,  6384, 12988, 10230, 12718,  5457,  2400}, 
					{   374,  2577,  3417,  6003,  5687,  6492,  7044,  5997,  4127,  5098,  2328,  2648}, 
					{    48,   788,   858,  2970,  1786,  4392,  2740,  5778,  3511,  4810,  1237,  1812}
				}};
				

				auto actualResult = convolution(inputBlackAndWhite, kernelsBlackAndWhite);
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
			
			SUBCASE("Color")
			{
				xt::xtensor<int, 3> expectedResult{
					{{ 7153,9200, 15386, 10166, 14242, 11543, 10629, 12405, 10235, 14333, 6892,3754},
					{12002, 15458, 24100, 19958, 19326, 17864, 18381, 24457, 19096, 25432,10914, 10008}, 
					{16128, 28606, 38238, 32475, 33602, 32981, 32319, 33152, 35049, 34559,22328, 13424},
					{20302, 39523, 56274, 46890, 46548, 44342, 48263, 49319, 49093, 45488,34177, 17689},
					{17550, 37503, 48163, 46853, 46606, 48215, 49618, 52164, 50466, 46279,32896, 10768},
					{17334, 32963, 53499, 52764, 54140, 50989, 49140, 46273, 50933, 47075,31431, 11465},
					{17689, 32531, 53097, 54928, 55439, 53719, 50555, 51432, 56429, 48802,25462,9037}, 
					{15652, 30395, 54552, 54698, 55724, 53612, 53117, 51453, 53337, 53278,31559, 13672}, 
					{16652, 34146, 56348, 58391, 63545, 57163, 50855, 46612, 45607, 49640,29885, 16871}, 
					{15133, 35051, 57980, 57542, 64304, 59123, 59610, 54222, 48903, 51799,29672, 15970},
					{17013, 31626, 49504, 46919, 50782, 56579, 56997, 55866, 46963, 50847,31636, 16197}, 
					{10758, 20900, 33551, 40510, 40807, 44272, 46961, 43734, 40669, 40547,22463, 11006},
					{ 5680, 15626, 23482, 26644, 33116, 33461, 34756, 36153, 32253, 27999,16908,5930}, 
					{ 4020,6575,9295, 11660, 13832, 17100, 19272, 20661, 18758, 13069, 8879,4524}},
					
					{{ 5688,4307, 12621,6860, 12633,7141,8785, 11587,5729, 12670, 3522,6559},
					{10226, 11686, 20823, 17647, 14875, 18900, 15090, 19317, 16140, 19829,10971,8811}, 
					{14381, 20388, 29377, 25358, 30223, 25249, 28734, 25367, 24873, 28489,18897, 11475},
					{14520, 26491, 33864, 38548, 33481, 30656, 34404, 27934, 36788, 30477,22960,8489}, 
					{12024, 25731, 34407, 31882, 34079, 33402, 29687, 31655, 35065, 33625,22543,8990}, 
					{12759, 20291, 36166, 32253, 32035, 36009, 30839, 33414, 38372, 30916,19355,5919},
					{10184, 20728, 42133, 38631, 34231, 33465, 36996, 34617, 37712, 31321,18783,7695},
					{11236, 23836, 38814, 39901, 39988, 34047, 35052, 36803, 34891, 31802,18451, 10547},
					{14359, 22011, 40189, 38634, 43093, 35160, 33179, 33378, 30883, 34711,19329, 12331},
					{11453, 19769, 38924, 35894, 39781, 38381, 36833, 40606, 32635, 37605,20254, 10618},
					{10296, 21508, 30549, 33052, 37479, 40305, 38279, 40621, 32700, 33059,20440,9017},
					{ 6897, 13255, 21114, 26687, 28032, 28202, 29848, 27705, 23976, 23895,13636,6233},
					{ 3878,7786, 13076, 11954, 13543, 18695, 19769, 21878, 18111, 11279, 8990,2544}, 
					{ 1923,3765,3796,4730,5188,5678,6626, 10099,7546,5921, 2377,1626}},
					
					{{ 5178, 10115, 13910, 10654, 13491, 11960, 10717, 12668, 12045, 15695, 7973,5621}, 
					{ 3421, 17296, 21441, 21002, 14515, 17249, 21093, 15646, 22894, 15423,18271,7843},
					{ 7711, 24379, 34823, 28643, 30977, 29756, 26542, 30086, 28955, 32073,26716, 10189},
					{14379, 30326, 50098, 41884, 39786, 39628, 36770, 41720, 36594, 43513,27108, 12259},
					{12015, 28659, 39063, 39885, 36735, 39199, 42331, 42036, 46481, 44501,24316, 10519}, 
					{10280, 31294, 43274, 47467, 44506, 42111, 41929, 38294, 45635, 40396,29108,8829}, 
					{10229, 31056, 40879, 48492, 46081, 42156, 40757, 43291, 43629, 38469,25774,8876},
					{ 9617, 26319, 45439, 43255, 47843, 45802, 44134, 47171, 43445, 44899,28521, 10364},
					{10387, 28050, 44524, 49750, 45955, 44968, 46505, 37641, 38650, 37567,31520, 12351},
					{11879, 31286, 47657, 54187, 50579, 48212, 54657, 44513, 40479, 42972,28913, 11662}, 
					{10862, 21640, 38290, 36202, 45449, 46278, 45457, 44830, 40972, 43429,30186, 12481}, 
					{ 6531, 18190, 26412, 26565, 32658, 32126, 37552, 37804, 31664, 31663,18460,9063}, 
					{ 5199, 14180, 18857, 20376, 27280, 24254, 24755, 28503, 24226, 20514,12906,4088},
					{ 4532,3757,6827,9919,9677, 13166, 14920, 14024, 12266, 10919, 5287,2592}}
					
				};
			
				auto actualResult = convolution(inputColor, kernelsColor);
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
		}
		
		SUBCASE("Custom dilation Default padding, stride")
		{
			std::tuple<int, int> padding{0, 0};
			std::tuple<int, int> dilation{2, 3};
			std::tuple<int, int> stride{1, 1};
			Conv2D convolution(padding, dilation, stride);
			
			SUBCASE("Black'n'White") 
			{
				xt::xtensor<int, 3> expectedResult{{
					{14783, 15464, 15592, 14783}, 
					{15995, 17908, 15758, 15839}, 
					{17816, 10134, 17441, 17721}, 
					{12234, 17580, 11670, 13443}, 
					{14144, 10054, 16753, 18399}
				}};
				
				auto actualResult = convolution(inputBlackAndWhite, kernelsBlackAndWhite);
				
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
			
			SUBCASE("Color")
			{
				xt::xtensor<int, 3> expectedResult{
					{{49844, 58477, 55898, 47996}, 
					{46884, 45174, 49709, 48095}, 
					{49448, 55523, 61000, 53214}, 
					{45598, 51356, 59886, 42119},
					{54556, 50838, 50868, 55782}},
					
					{{32298, 39509, 38900, 31914}, 
					{33411, 30921, 36897, 31181}, 
					{34988, 36224, 36482, 36070}, 
					{27646, 38149, 38054, 24718}, 
					{37775, 33050, 32026, 41038}},
					
					{{40413, 49732, 47226, 44971}, 
					{39354, 32454, 40285, 38729}, 
					{41595, 44175, 48407, 44752}, 
					{38409, 46125, 46321, 31034}, 
					{45142, 47288, 45699, 50986}}
				};
			
				auto actualResult = convolution(inputColor, kernelsColor);
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
		}
	
		SUBCASE("Custom stride Default padding, dilation")
		{
			std::tuple<int, int> padding{0, 0};
			std::tuple<int, int> dilation{1, 1};
			std::tuple<int, int> stride{5, 4};
			Conv2D convolution(padding, dilation, stride);
			
			SUBCASE("Black'n'White") 
			{
				xt::xtensor<int, 3> expectedResult{{
					{16959, 15155}, 
					{14825, 15324}
				}};
				
				auto actualResult = convolution(inputBlackAndWhite, kernelsBlackAndWhite);
				
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
			
			SUBCASE("Color")
			{
				xt::xtensor<int, 3> expectedResult{
					{{56274, 48263}, {56348, 50855}},
					{{33864, 34404}, {40189, 33179}},
					{{50098, 36770}, {44524, 46505}}
				};
			
				auto actualResult = convolution(inputColor, kernelsColor);
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
		}
		
		SUBCASE("Custom padding, dilation, stride")
		{
			std::tuple<int, int> padding{3, 2};
			std::tuple<int, int> dilation{2, 3};
			std::tuple<int, int> stride{5, 4};
			Conv2D convolution(padding, dilation, stride);
			
			SUBCASE("Black'n'White") 
			{
				xt::xtensor<int, 3> expectedResult{{
					{ 2619,  8209}, 
					{ 6078, 17441}, 
					{ 6345,  3165}
				}};
				
				auto actualResult = convolution(inputBlackAndWhite, kernelsBlackAndWhite);
				
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
			
			SUBCASE("Color")
			{
				xt::xtensor<int, 3> expectedResult{
					{{12178, 14334}, {44308, 61000}, {22781, 32479}},
					{{ 9565, 15956}, {26277, 36482}, {13598, 20289}},
					{{17493, 13961}, {35674, 48407}, {20310, 22897}}
				};
			
				auto actualResult = convolution(inputColor, kernelsColor);
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
		}

		SUBCASE("Mismatch in number of input channels")
		{
			
		}
		
		SUBCASE("Oversized Kernel no input padding")
		{
			
		}
		
		SUBCASE("Oversized Kernel and input padding")
		{
			
		}
	}	
}


TEST_CASE("Input Layout: Height x Width x Channel")
{
	SUBCASE("Even Input, Odd Kernel") 
	{
		xt::xtensor<int, 3> inputBlackAndWhite{
			{{810}, {814}, {401}, {211}, {690}, { 76}, {762}, {588}, {871}, {378}},
			{{962}, { 28}, {457}, {966}, {607}, {302}, {903}, { 10}, {263}, {572}},
			{{991}, { 44}, {500}, {126}, {270}, {499}, {540}, {247}, {314}, { 38}},
			{{854}, {329}, {435}, {175}, { 33}, {648}, {697}, {797}, {919}, {771}},
			{{176}, {385}, {806}, {500}, {545}, {365}, {602}, {506}, {873}, {885}},
			{{111}, {894}, {500}, {100}, {836}, {858}, { 86}, {357}, { 82}, {850}},
			{{109}, {954}, {783}, {899}, {269}, {175}, {456}, {280}, {384}, {795}},
			{{678}, {805}, { 98}, {676}, {987}, {837}, {  5}, {785}, {510}, {454}},
			{{540}, { 15}, {709}, {843}, { 38}, {608}, {560}, {954}, {574}, {147}},
			{{139}, {431}, {453}, {471}, {676}, { 78}, {191}, {345}, {190}, {662}},
			{{ 24}, {382}, {190}, {626}, {200}, {844}, {548}, {927}, {196}, {453}}
		};
		xt::xtensor<int, 4> kernelsBlackAndWhite{{
			{
				{4, 1, 2},
				{0, 2, 4},
				{4, 2, 2},
				{4, 4, 1}
			}
		}};
		
		xt::xtensor<int, 3> inputColor{
			{{682, 860, 783}, { 31, 382, 692}, {888, 969, 422}, { 22, 360, 639}, {515, 804, 504}, {670, 474, 689}, {197, 288, 158}, {898, 798, 919}, {135, 131, 588}, {935, 469, 943}},
			{{603, 574, 188}, {639, 611, 682}, { 29,  49, 592}, {655, 633, 139}, {444, 198, 141}, {160, 459, 264}, {974, 182, 684}, { 46, 432, 765}, {479, 605, 234}, {536, 958,  16}},
			{{359, 601, 618}, {563, 383, 956}, {550, 532, 683}, {695, 361, 225}, {935, 956, 772}, {567, 265, 272}, {416, 730, 220}, {207, 101, 872}, {810, 903,  99}, {508, 403, 701}},
			{{409, 611, 262}, {986, 949, 431}, {615, 165, 482}, {864,  36, 404}, {512,  20, 541}, {875, 545,  30}, {232, 483, 733}, {135, 774, 623}, {401, 853, 115}, {310,  99, 144}},
			{{361, 153, 753}, {295, 151, 498}, {884, 850,  78}, {222, 419, 196}, {274, 364, 894}, {403, 835, 889}, {315, 816, 831}, {860, 448, 735}, {519, 169, 937}, {643,  12, 820}},
			{{ 42, 851, 515}, {645, 274,  91}, {866, 754, 427}, {974, 656, 543}, {355,  69, 590}, {425,  49, 685}, {426, 231, 453}, {742, 244, 355}, {701, 727, 674}, {228, 162, 718}},
			{{401, 328, 428}, {984, 500, 708}, {790, 819, 728}, {811, 747, 819}, {888, 519, 828}, {259, 403, 903}, {506, 935, 744}, {455, 860, 113}, {395, 520, 628}, {398, 520,  98}},
			{{949, 600, 277}, {340, 462, 586}, {824, 985, 150}, {529, 239, 195}, {949, 380, 233}, {637, 831, 508}, {206, 575, 129}, {502, 740, 132}, {216, 434, 637}, {840, 596, 433}},
			{{342, 405, 428}, {288, 326, 584}, {231, 749, 712}, {350, 734, 370}, {623, 755, 680}, {186, 598, 786}, {525,  69, 972}, {394, 372,  67}, {411, 293, 550}, {852, 759, 452}},
			{{370, 138, 442}, {850, 506, 735}, {172, 753, 999}, {208, 164, 921}, {933, 756, 274}, {352, 982, 929}, {802, 307, 313}, {819, 717, 672}, {249, 480, 967}, {377, 137, 707}},
			{{300, 641, 256}, { 52, 314, 323}, {493, 173,  28}, {987, 489, 590}, {568,  71, 902}, {318, 568, 604}, {769, 951, 907}, {228, 877, 659}, {440, 157, 526}, {180, 280, 786}}
		};
		xt::xtensor<int, 4> kernelsColor{
			{
				{{3, 4, 4},{4, 3, 3},{3, 3, 2},{1, 1, 2}}, 
				{{3, 4, 4},{3, 3, 2},{4, 0, 4},{4, 2, 4}}, 
				{{4, 4, 1},{0, 3, 4},{1, 1, 4},{1, 4, 3}}
			},
			
			{
				{{0, 3, 0},{2, 0, 3},{0, 3, 4},{4, 2, 1}}, 
				{{3, 3, 3},{1, 4, 4},{4, 1, 4},{4, 0, 4}},
				{{1, 0, 0},{1, 3, 0},{1, 1, 1},{1, 0, 2}}
			},
			
			{
				{{1, 1, 4},{3, 4, 4},{0, 3, 0},{4, 1, 3}}, 
				{{3, 0, 4},{2, 3, 1},{2, 4, 1},{2, 4, 0}},
				{{2, 4, 3},{1, 3, 0},{3, 4, 0},{1, 4, 4}}
			}
		};
		
		SUBCASE("Default padding, dilation, stride") 
		{
			std::tuple<int, int> padding{0, 0};
			std::tuple<int, int> dilation{1, 1};
			std::tuple<int, int> stride{1, 1};
			Conv2D convolution(padding, dilation, stride);
			
			SUBCASE("Black'n'White") 
			{
				xt::xtensor<int, 3> expectedResult{
					{{16959}, {13516}, {12820}, { 7630}, {15155}, {13835}, {16627}, {16120}},
					{{14872}, {11805}, {13265}, {14218}, {14758}, {14153}, {17423}, {15196}},
					{{15012}, {12326}, {11698}, {12852}, {17719}, {15421}, {15325}, {14446}},
					{{16876}, {18336}, {16030}, {13214}, {12776}, {15233}, {14477}, {17678}},
					{{16429}, {16214}, {17909}, {20352}, {15448}, {10999}, {12524}, {17343}},
					{{14825}, {17945}, {16610}, {14674}, {15324}, {16818}, {12201}, {18485}},
					{{11299}, {16468}, {18839}, {18867}, { 9552}, {11747}, {14112}, {13990}},
					{{10717}, {15946}, {12450}, {15413}, {16217}, {17738}, {13959}, {14323}}
				};
				
				auto actualResult = convolution(inputBlackAndWhite, kernelsBlackAndWhite, false);
				
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
		
			SUBCASE("Color")
			{
				xt::xtensor<int, 3> expectedResult{
					{{56274, 33864, 50098}, {46890, 38548, 41884}, {46548, 33481, 39786}, {44342, 30656, 39628}, {48263, 34404, 36770}, {49319, 27934, 41720}, {49093, 36788, 36594}, {45488, 30477, 43513}},
					{{48163, 34407, 39063}, {46853, 31882, 39885}, {46606, 34079, 36735}, {48215, 33402, 39199}, {49618, 29687, 42331}, {52164, 31655, 42036}, {50466, 35065, 46481}, {46279, 33625, 44501}},
					{{53499, 36166, 43274}, {52764, 32253, 47467}, {54140, 32035, 44506}, {50989, 36009, 42111}, {49140, 30839, 41929}, {46273, 33414, 38294}, {50933, 38372, 45635}, {47075, 30916, 40396}},
					{{53097, 42133, 40879}, {54928, 38631, 48492}, {55439, 34231, 46081}, {53719, 33465, 42156}, {50555, 36996, 40757}, {51432, 34617, 43291}, {56429, 37712, 43629}, {48802, 31321, 38469}},
					{{54552, 38814, 45439}, {54698, 39901, 43255}, {55724, 39988, 47843}, {53612, 34047, 45802}, {53117, 35052, 44134}, {51453, 36803, 47171}, {53337, 34891, 43445}, {53278, 31802, 44899}},
					{{56348, 40189, 44524}, {58391, 38634, 49750}, {63545, 43093, 45955}, {57163, 35160, 44968}, {50855, 33179, 46505}, {46612, 33378, 37641}, {45607, 30883, 38650}, {49640, 34711, 37567}},
					{{57980, 38924, 47657}, {57542, 35894, 54187}, {64304, 39781, 50579}, {59123, 38381, 48212}, {59610, 36833, 54657}, {54222, 40606, 44513}, {48903, 32635, 40479}, {51799, 37605, 42972}},
					{{49504, 30549, 38290}, {46919, 33052, 36202}, {50782, 37479, 45449}, {56579, 40305, 46278}, {56997, 38279, 45457}, {55866, 40621, 44830}, {46963, 32700, 40972}, {50847, 33059, 43429}}
				};
				
				auto actualResult = convolution(inputColor, kernelsColor, false);
				
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
		}
		
		SUBCASE("Custom padding Default dilation, stride")
		{
			std::tuple<int, int> padding{3, 2};
			std::tuple<int, int> dilation{1, 1};
			std::tuple<int, int> stride{1, 1};
			Conv2D convolution(padding, dilation, stride);
			
			SUBCASE("Black'n'White")
			{
				xt::xtensor<int, 3> expectedResult{
					{{810}, { 4054}, { 6897}, { 5071}, { 3138}, { 3680}, { 3826}, { 3940}, { 6271}, { 6214}, { 4996}, { 1512}},
					{{ 2582}, { 7124}, {10087}, { 7386}, { 9705}, { 8970}, { 8975}, { 7834}, { 9881}, { 6514}, { 7580}, { 3800}},
					{{ 6155}, {10864}, {12690}, { 6906}, {10930}, { 9449}, {11654}, {11313}, {12280}, { 7246}, { 4360}, { 2440}},
					{{ 8304}, {10289}, {16959}, {13516}, {12820}, { 7630}, {15155}, {13835}, {16627}, {16120}, {13098}, { 4748}},
					{{ 7772}, { 6631}, {14872}, {11805}, {13265}, {14218}, {14758}, {14153}, {17423}, {15196}, {13950}, { 8912}},
					{{ 5861}, { 6563}, {15012}, {12326}, {11698}, {12852}, {17719}, {15421}, {15325}, {14446}, {11826}, { 7092}},
					{{ 2743}, { 6804}, {16876}, {18336}, {16030}, {13214}, {12776}, {15233}, {14477}, {17678}, {12961}, { 9664}},
					{{ 1692}, {10387}, {16429}, {16214}, {17909}, {20352}, {15448}, {10999}, {12524}, {17343}, {13059}, { 8536}},
					{{ 2554}, {11074}, {14825}, {17945}, {16610}, {14674}, {15324}, {16818}, {12201}, {18485}, { 8600}, { 5804}},
					{{ 4149}, { 8690}, {11299}, {16468}, {18839}, {18867}, { 9552}, {11747}, {14112}, {13990}, { 9237}, { 6416}},
					{{ 3818}, { 5046}, {10717}, {15946}, {12450}, {15413}, {16217}, {17738}, {13959}, {14323}, { 7468}, { 6276}},
					{{ 1684}, { 3384}, { 7507}, { 8405}, { 9813}, {10882}, { 6384}, {12988}, {10230}, {12718}, { 5457}, { 2400}},
					{{374}, { 2577}, { 3417}, { 6003}, { 5687}, { 6492}, { 7044}, { 5997}, { 4127}, { 5098}, { 2328}, { 2648}},
					{{ 48}, {788}, {858}, { 2970}, { 1786}, { 4392}, { 2740}, { 5778}, { 3511}, { 4810}, { 1237}, { 1812}}
				};
				
				auto actualResult = convolution(inputBlackAndWhite, kernelsBlackAndWhite, false);
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
			
			SUBCASE("Color")
			{
				xt::xtensor<int, 3> expectedResult{
					{{ 7153,5688,5178}, { 9200,4307, 10115}, {15386, 12621, 13910}, {10166,6860, 10654}, {14242, 12633, 13491}, {11543,7141, 11960}, {10629,8785, 10717}, {12405, 11587, 12668}, {10235,5729, 12045}, {14333, 12670, 15695}, { 6892,3522,7973}, { 3754,6559,5621}},
					{{12002, 10226,3421}, {15458, 11686, 17296}, {24100, 20823, 21441}, {19958, 17647, 21002}, {19326, 14875, 14515}, {17864, 18900, 17249}, {18381, 15090, 21093}, {24457, 19317, 15646}, {19096, 16140, 22894}, {25432, 19829, 15423}, {10914, 10971, 18271}, {10008,8811,7843}},
					{{16128, 14381,7711}, {28606, 20388, 24379}, {38238, 29377, 34823}, {32475, 25358, 28643}, {33602, 30223, 30977}, {32981, 25249, 29756}, {32319, 28734, 26542}, {33152, 25367, 30086}, {35049, 24873, 28955}, {34559, 28489, 32073}, {22328, 18897, 26716}, {13424, 11475, 10189}},
					{{20302, 14520, 14379}, {39523, 26491, 30326}, {56274, 33864, 50098}, {46890, 38548, 41884}, {46548, 33481, 39786}, {44342, 30656, 39628}, {48263, 34404, 36770}, {49319, 27934, 41720}, {49093, 36788, 36594}, {45488, 30477, 43513}, {34177, 22960, 27108}, {17689,8489, 12259}},
					{{17550, 12024, 12015}, {37503, 25731, 28659}, {48163, 34407, 39063}, {46853, 31882, 39885}, {46606, 34079, 36735}, {48215, 33402, 39199}, {49618, 29687, 42331}, {52164, 31655, 42036}, {50466, 35065, 46481}, {46279, 33625, 44501}, {32896, 22543, 24316}, {10768,8990, 10519}},
					{{17334, 12759, 10280}, {32963, 20291, 31294}, {53499, 36166, 43274}, {52764, 32253, 47467}, {54140, 32035, 44506}, {50989, 36009, 42111}, {49140, 30839, 41929}, {46273, 33414, 38294}, {50933, 38372, 45635}, {47075, 30916, 40396}, {31431, 19355, 29108}, {11465,5919,8829}},
					{{17689, 10184, 10229}, {32531, 20728, 31056}, {53097, 42133, 40879}, {54928, 38631, 48492}, {55439, 34231, 46081}, {53719, 33465, 42156}, {50555, 36996, 40757}, {51432, 34617, 43291}, {56429, 37712, 43629}, {48802, 31321, 38469}, {25462, 18783, 25774}, { 9037,7695,8876}},
					{{15652, 11236,9617}, {30395, 23836, 26319}, {54552, 38814, 45439}, {54698, 39901, 43255}, {55724, 39988, 47843}, {53612, 34047, 45802}, {53117, 35052, 44134}, {51453, 36803, 47171}, {53337, 34891, 43445}, {53278, 31802, 44899}, {31559, 18451, 28521}, {13672, 10547, 10364}},
					{{16652, 14359, 10387}, {34146, 22011, 28050}, {56348, 40189, 44524}, {58391, 38634, 49750}, {63545, 43093, 45955}, {57163, 35160, 44968}, {50855, 33179, 46505}, {46612, 33378, 37641}, {45607, 30883, 38650}, {49640, 34711, 37567}, {29885, 19329, 31520}, {16871, 12331, 12351}},
					{{15133, 11453, 11879}, {35051, 19769, 31286}, {57980, 38924, 47657}, {57542, 35894, 54187}, {64304, 39781, 50579}, {59123, 38381, 48212}, {59610, 36833, 54657}, {54222, 40606, 44513}, {48903, 32635, 40479}, {51799, 37605, 42972}, {29672, 20254, 28913}, {15970, 10618, 11662}},
					{{17013, 10296, 10862}, {31626, 21508, 21640}, {49504, 30549, 38290}, {46919, 33052, 36202}, {50782, 37479, 45449}, {56579, 40305, 46278}, {56997, 38279, 45457}, {55866, 40621, 44830}, {46963, 32700, 40972}, {50847, 33059, 43429}, {31636, 20440, 30186}, {16197,9017, 12481}},
					{{10758,6897,6531}, {20900, 13255, 18190}, {33551, 21114, 26412}, {40510, 26687, 26565}, {40807, 28032, 32658}, {44272, 28202, 32126}, {46961, 29848, 37552}, {43734, 27705, 37804}, {40669, 23976, 31664}, {40547, 23895, 31663}, {22463, 13636, 18460}, {11006,6233,9063}},
					{{ 5680,3878,5199}, {15626,7786, 14180}, {23482, 13076, 18857}, {26644, 11954, 20376}, {33116, 13543, 27280}, {33461, 18695, 24254}, {34756, 19769, 24755}, {36153, 21878, 28503}, {32253, 18111, 24226}, {27999, 11279, 20514}, {16908,8990, 12906}, { 5930,2544,4088}},
					{{ 4020,1923,4532}, { 6575,3765,3757}, { 9295,3796,6827}, {11660,4730,9919}, {13832,5188,9677}, {17100,5678, 13166}, {19272,6626, 14920}, {20661, 10099, 14024}, {18758,7546, 12266}, {13069,5921, 10919}, { 8879,2377,5287}, { 4524,1626,2592}}
				};

			
				auto actualResult = convolution(inputColor, kernelsColor, false);
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
		}
		
		SUBCASE("Custom dilation Default padding, stride")
		{
			std::tuple<int, int> padding{0, 0};
			std::tuple<int, int> dilation{2, 3};
			std::tuple<int, int> stride{1, 1};
			Conv2D convolution(padding, dilation, stride);
			
			SUBCASE("Black'n'White") 
			{
				xt::xtensor<int, 3> expectedResult{
					{{14783}, {15464}, {15592}, {14783}},
					{{15995}, {17908}, {15758}, {15839}},
					{{17816}, {10134}, {17441}, {17721}},
					{{12234}, {17580}, {11670}, {13443}},
					{{14144}, {10054}, {16753}, {18399}}
				};
				
				auto actualResult = convolution(inputBlackAndWhite, kernelsBlackAndWhite, false);
				
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
			
			SUBCASE("Color")
			{
				xt::xtensor<int, 3> expectedResult{
					{{49844, 32298, 40413}, {58477, 39509, 49732}, {55898, 38900, 47226}, {47996, 31914, 44971}},
					{{46884, 33411, 39354}, {45174, 30921, 32454}, {49709, 36897, 40285}, {48095, 31181, 38729}},
					{{49448, 34988, 41595}, {55523, 36224, 44175}, {61000, 36482, 48407}, {53214, 36070, 44752}},
					{{45598, 27646, 38409}, {51356, 38149, 46125}, {59886, 38054, 46321}, {42119, 24718, 31034}},
					{{54556, 37775, 45142}, {50838, 33050, 47288}, {50868, 32026, 45699}, {55782, 41038, 50986}}
				};
			
				auto actualResult = convolution(inputColor, kernelsColor, false);
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
		}
	
		SUBCASE("Custom stride Default padding, dilation")
		{
			std::tuple<int, int> padding{0, 0};
			std::tuple<int, int> dilation{1, 1};
			std::tuple<int, int> stride{5, 4};
			Conv2D convolution(padding, dilation, stride);
			
			SUBCASE("Black'n'White") 
			{
				xt::xtensor<int, 3> expectedResult{
					{{16959}, {15155}},
					{{14825}, {15324}}
				};
				
				auto actualResult = convolution(inputBlackAndWhite, kernelsBlackAndWhite, false);
				
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
			
			SUBCASE("Color")
			{
				xt::xtensor<int, 3> expectedResult{
					{{56274, 33864, 50098}, {48263, 34404, 36770}},
					{{56348, 40189, 44524}, {50855, 33179, 46505}}
				};
			
				auto actualResult = convolution(inputColor, kernelsColor, false);
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
		}
		
		SUBCASE("Custom padding, dilation, stride")
		{
			std::tuple<int, int> padding{3, 2};
			std::tuple<int, int> dilation{2, 3};
			std::tuple<int, int> stride{5, 4};
			Conv2D convolution(padding, dilation, stride);
			
			SUBCASE("Black'n'White") 
			{
				xt::xtensor<int, 3> expectedResult{
					{{ 2619}, { 8209}},
					{{ 6078}, {17441}},
					{{ 6345}, { 3165}}
				};
				
				auto actualResult = convolution(inputBlackAndWhite, kernelsBlackAndWhite, false);
				
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
			
			SUBCASE("Color")
			{
				xt::xtensor<int, 3> expectedResult{
					{{12178,9565, 17493}, {14334, 15956, 13961}},
					{{44308, 26277, 35674}, {61000, 36482, 48407}},
					{{22781, 13598, 20310}, {32479, 20289, 22897}}
				};
			
				auto actualResult = convolution(inputColor, kernelsColor, false);
				CHECK(expectedResult.shape() == actualResult.shape());
				CHECK(expectedResult == actualResult);
			}
		}

		SUBCASE("Mismatch in number of input channels")
		{
			
		}
		
		SUBCASE("Oversized Kernel no input padding")
		{
			
		}
		
		SUBCASE("Oversized Kernel and input padding")
		{

		}
	}
}
